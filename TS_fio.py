# -*- coding: utf-8 -*-
"""
TS_fio.py

File I/O and transmission curve functions for TranStack

Created on Thu Sep  9 12:39:13 2021

@author: Willow
"""

import os
import pandas as pd
import numpy as np
from scipy.interpolate import interp1d
import wget
from TS_settings import verbose




def optical_curve(file):
    data = pd.read_csv(file, delimiter=',')
    data.columns = data.columns.str.strip()
    try:
        wavey = [col for col in data.columns if("wave" in col.lower()) ]
        wavelength = (data[wavey[0]])
        if len(wavey)>1:
            print("__WARN__:\n Found multiple wavelength columns possable mismatch \n")
    except:
        print("\n\n __ERROR__ \n Wavelength Data not found for file: {} \n please check data headings \n____________________".format(file))
        return(-1)
    try:
        transy = [col for col in data.columns if("trans" in col.lower() or ("refl" in col.lower())) ]
        transmission = (data[transy[0]])    
        if len(transy)>1:
            print("__WARN__:\n Found multiple transmission columns possable mismatch \n")
    except:  
        print("\n\n __ERROR__ \n Transmission Data not found for file: {} \n please check data headings\n____________________".format(file))
        return(-1)
    if max(wavelength)>100:
        wavelength=wavelength/1000
        if verbose:
            print("Wavelength data in File {} appears to be in nm (max(w)>10), upscaling ... ".format(file))
    if max(transmission)>1:
        transmission=transmission/100
        if verbose:
            print("The transmission data in File {} appears to be in percent, downscaling ... ".format(file))
    f2 = interp1d(wavelength, transmission, kind='cubic',bounds_error=False,fill_value=0.0001)
    if verbose:
        print("interpolation generated for {}".format(file))
    return f2


def csvFromXl(xlfile):
    """
    checks for and generates csv files from THOR LABS excel documents

    Parameters
    ----------
    xlfile : STR
        path of an excel file in the working directory containing wavelength and transmission/reflectance data
        
    Returns
    -------
    STR path to the corresponding/created csv file.

    """
    name = xlfile.split(".")[-2]
    if verbose:
        print("file name : {}".format(name))
    if os.path.exists(os.path.join(name,".csv")):
        if verbose:
            print("{}.csv exists".format(name))
        pass
    else:
        if verbose:
            print("{}.csv will be created".format(name))
        csvfile = open("{}.csv".format(name), 'w+', encoding='utf-8')
        xl_obj = pd.read_excel(xlfile,skiprows=2,index_col=1)
        xl_obj.to_csv(csvfile, encoding='utf-8')
        csvfile.close()
        if verbose:
            print("{}.csv file created".format(name))
    return("{}.csv".format(name))


def add_curve_from_file(file,Filters,wavelength_range):
    """
    add_curve_form_file() 
    adds an interpolated transmission curve for the file (generated by optival curve) to the dictionary of filters

    Parameters
    ----------
    file : STR
        path to a csv file containing wavelength and transmission/reflectance data
    Filters : ARRAY
        the list/array of already imported filter csvs
    wavelength_range : ARRAY
        wavelength values for which the transmission/reflectance will be interpolated

    Returns
    -------
    None. - updates Filters to include a curve for file

    """
    name = file.split('.')[0]
    nameST = "{}".format(name)
    if verbose:
        print("\n Found Filter {} \n at {}".format(nameST,file))

    if file.endswith(".xlsx"):
        if verbose:
            print("found EXCEL file checking for csv")
        file = csvFromXl(file)


    func = optical_curve(file)
    if func != -1:
        Filters.update({nameST:func(wavelength_range)})
    return()


def add_curve_from_url(url):
    """
    add_curve_from_URL - NOT IN USE 

    Parameters
    ----------
    url : STR
        URL address of a thor labs excel file (generated from a filter name and a known pattern)

    Returns
    -------
    None. - downloads file and calls add_curve_from_file

    """
    if type(url)!=str:
        print("getURL expects a string, got a {}".format(type(url)))
        return(-1)
    else:
        try:
            file = wget.download(url)
        except:
           print("wget download failed please check URL")
           return(-1)
        if file.endswith(".xls") or file.endswith(".csv"):
            return(add_curve_from_file(file))
        else:
            print("File is not a recognised type")
            return(-1)
    pd.read_excel()

def recalc(WR, Filters, Coeffs):
    """
    recalc() 
    recalculates the transmission of the whole stack based on the counters assigned to each filter

    Parameters
    ----------
    WR : ARRAY
        The Wavelength Range being plotted
    Filters : ARRAY
        The List of known filter curves
    Coeffs : ARRAY
        The corresponding number of each filter in the stack to be plotted

    Returns
    -------
    None. - updates line data

    """
    Trans = np.ones_like(WR)
    if len(Filters)==len(Coeffs):
        for ind, Filter in enumerate(Filters):
            Trans=Trans*(Filters[Filter]**Coeffs[ind].value)
    return(Trans)
